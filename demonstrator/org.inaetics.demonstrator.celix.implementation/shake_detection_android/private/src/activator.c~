#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "bundle_activator.h"
#include "test.h"

#include "bundle_context.h"
#include "celix_errno.h"
#include "constants.h"
#include "properties.h"
#include "service_registration.h"
#include "service_tracker.h"
#include "service_tracker_customizer.h"
#include "remote_constants.h"
#include "inaetics_demonstrator_api/producer.h"
#include "inaetics_demonstrator_api/sample_queue.h"
#include "inaetics_demonstrator_api/stats_provider.h"

struct bundle_activator {
	bundle_context_pt context;
	service_tracker_pt producerTracker;
	shakedetection_pt shakedetect;
	
};

typedef struct bundle_activator* bundle_activator_pt;

celix_status_t bundleActivator_create(bundle_context_pt context, void **userData) {
	celix_status_t status = CELIX_SUCCESS;
	bundle_activator_pt activator = (bundle_activator_pt) calloc(1,sizeof(*activator));
	if (activator) {
		activator->producerTracker = NULL;
		activator->shakedetect = NULL;
		*userData = activator;
	} else {
		status = CELIX_ENOMEM;
	}

	return status;
}

celix_status_t bundleActivator_start(void * userData, bundle_context_pt context) {
	celix_status_t status = CELIX_SUCCESS;
        service_tracker_customizer_pt producerCustomizer = NULL;
	bundle_activator_pt activator = (bundle_activator_pt) userData;

	char *uuid = NULL;
	bundleContext_getProperty(context, OSGI_FRAMEWORK_FRAMEWORK_UUID, &uuid);
	status = shakedetection_create(uuid, &activator->shakedetect);

	/* Track producerService */
        serviceTrackerCustomizer_create(context, NULL, shakedetection_producerAdded, NULL, shakedetection_producerRemoved, &producerCustomizer);
        serviceTracker_create(context, INAETICS_DEMONSTRATOR_API__PRODUCER_SERVICE_NAME, producerCustomizer, &activator->producerTracker);
        serviceTracker_open(activator->producerTracker);	

	shakedetection_start();

	return status;
}

celix_status_t bundleActivator_stop(void * userData, bundle_context_pt context) {
	bundle_activator_pt activator = (bundle_activator_pt) userData;
	serviceTracker_close(activator->producerTracker);
	serviceTracker_destroy(activator->producerTracker);
	shakedetection_stop();
	return CELIX_SUCCESS;
}

celix_status_t bundleActivator_destroy(void * userData, bundle_context_pt context) {
    	free(userData);
	return CELIX_SUCCESS;
}
